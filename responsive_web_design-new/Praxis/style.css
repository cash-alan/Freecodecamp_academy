/* Step 49
You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.
A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.
One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.
In the .red CSS rule, change the background-color property to background. */
/* Step 50
The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:
`linear-gradient(gradientDirection, color1, color2, ...);`
gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.
Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.
First, in the .red CSS rule, set the background property to linear-gradient(), and pass it the value 90deg as the gradientDirection. */
/* Step 51
You'll use the rgb function for the colors of this gradient.
In the linear-gradient function, use the rgb function to set the first color argument to pure red. */
/* Step 52
You won't see gradient yet because the linear-gradient function needs at least two color arguments to work.
In the same linear-gradient function, use the rgb function to set the second color argument to pure green. */
/* Step 53
As you can see, the linear-gradient function produced a smooth red-green gradient. While the linear-gradient function needs a minimum of two color arguments to work, it can accept many color arguments.
Use the rgb function to add pure blue as the third color argument to the linear-gradient function. */
/* Step 54
Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.
For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:
linear-gradient(90deg, red 90%, black);
In the linear-gradient function, add a 75% color stop after the first red color argument. Do not add color stops to the other colors arguments. */
/* Step 55
Now that you know the basics of how the linear-gradient function and color-stops work, you can use them to make the markers look more realistic.
In the linear-gradient function, set gradientDirection to 180deg. */
/* Step 56
Next, set the color-stop for red to 0%, the color-stop for green to 50%, and the color-stop for blue to 100%; */
/* Step 57
Now that the color-stops are set, you'll apply different shades of red to each color argument in the linear-gradient function. The shades on the top and bottom edges of the marker will be darker, while the one in the middle will be lighter, as if there's a light above it.
For the first color argument, which is currently pure red, update the rgb function so the value for red is 122, the value for green is 74, and the value for blue is 14. */
/* Step 58
Now modify the second color argument in the linear-gradient function, which is currently pure green.
Update the rgb function so the value for red is 245, the value of green is 62, and the value of blue is 113. */
/* Step 59
Finally, modify the third color argument in the linear-gradient function, which is currently pure blue.
Update the rgb function so the value for red is 162, the value of green is 27, and the value of blue is 27. */
/* Step 60
The red marker is looking much more realistic. Now you'll do the same for the green marker, using a combination of the linear-gradient function and hex colors.
In the .green CSS rule, change the background-color property to background. */
/* Step 61
For this marker, you'll use hex color codes for your gradient.
Use the linear-gradient function and set gradientDirection to 180deg. And for the first color argument, use a hex color code with the values 55 for red, 68 for green, and 0D for blue. */
/* Step 62
For the second color argument, use a hex color code with the values 71 for red, F5 for green, and 3E for blue. */
/* Step 63
That's looking better, but the bottom edge of the green marker needs to be darker to add a little more dimension.
In the same linear-gradient function, add a hex color code with the values 11 for red, 6C for green, and 31 for blue as the third color argument. */
/* Step 64
Even without the color-stops, you might have noticed that the colors for the green marker transition at the same points as the red marker. The first color is at the start (0%), the second is in the middle (50%), and the last is at the end (100%) of the gradient line.
The linear-gradient function automatically calculates these values for you, and places colors evenly along the gradient line by default.
In the .red CSS rule, remove the three color stops from the linear-gradient function to clean up your code a bit. */
/* Step 65
If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default.
Clean up your code a little more by removing the gradientDirection argument from both linear-gradient functions. */
/* Step 66
Now you'll apply a gradient to the blue marker, this time using the hsl function as color arguments.
In the .blue CSS rule, change the background-color property to background. */
/* Step 67
Use the linear-gradient function, and pass in the hsl function with the values 186 for hue, 76% for saturation, and 16% for lightness as the first color argument. */
/* Step 68
As the second color argument, pass in the hsl function with the values 223 for hue, 90% for saturation, and 60% for lightness. */
/* Step 69
And as the third color argument, pass in the hsl function with the values 240 for hue, 56% for saturation, and 42% for lightness. */

h1 {
  text-align: center;
}

.container {
  background-color: rgb(255, 255, 255);
  padding: 10px 0;
}

.marker {
  width: 200px;
  height: 25px;
  margin: 10px auto;
}

.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
}

.green {
  background: linear-gradient(#55680D, #71F53E, #116C31);
}

.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
}

